plugins {
    id 'eu.xenit.docker-alfresco' version '5.0.7' apply false
    id 'eu.xenit.docker-compose.auto' version '5.0.7' apply false
    id 'java'
    id 'idea'
}

ext {
    slf4jVersion = '1.7.25'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"

    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
}

test {
    // By default tests should only run in the subprojects. To manually run tests in your IDEA, uncomment:
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

subprojects {
    apply plugin: 'java'

    def alfrescoVersion = project.name[-2..-1]
    apply from: "${project.projectDir}/overload.gradle"

    description = "Alfresco ${alfrescoVersion} with Alfred Micrometer"

    task integrationTest(type: Test) {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest

    apply plugin: 'eu.xenit.docker-alfresco'
    apply plugin: 'eu.xenit.docker-compose.auto'

    dependencies {
        alfrescoAmp project(path: ":alfred-telemetry-platform", configuration: "amp")

        // If customers want to use specific MeterRegistries, they should be added to the classpath:
        alfrescoSM "io.micrometer:micrometer-registry-graphite:${micrometerVersion}"
        alfrescoSM "io.micrometer:micrometer-registry-jmx:${micrometerVersion}"
        alfrescoSM "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"

        baseAlfrescoWar "${alfrescoBaseWar}"
    }

    dockerAlfresco {
        baseImage = "${alfrescoBaseImage}"
        leanImage = true

        dockerBuild {
            repository = "hub.xenit.eu/alfred-telemetry/alfresco-alfred-telemetry-${alfrescoVersion}"
            tags = ["${version}"]
            automaticTags = false
        }
    }

    afterEvaluate {
        graphiteComposeUp.dependsOn(buildDockerImage)
        prometheusComposeUp.dependsOn(buildDockerImage)
        buildDockerImage {
            doLast {
                dockerCompose.graphite.environment.put 'DOCKER_IMAGE', getImageId()
                dockerCompose.prometheus.environment.put 'DOCKER_IMAGE', getImageId()
            }
        }
    }

    // Make sure solr images project is loaded before we try to load a task from it.
    // Necessary because :solr-images:solr-* is cross-configured from the :solr-images project
    project.evaluationDependsOn(":alfred-telemetry-solr")
    project.evaluationDependsOn(":alfred-telemetry-solr:${solrFlavor}")
    def solrImage = project(":alfred-telemetry-solr:${solrFlavor}")

    dockerCompose {
        useComposeFiles = [
                '../src/test/resources/compose/docker-compose.yml',
                '../src/test/resources/compose/docker-compose-jmx.yml'
        ]

        removeVolumes = true
        captureContainersOutput = false

        // Uncomment for quick iterations when developing integration tests
        // stopContainers = false

        // expose alfresco/inflow on a random port, comment to use default port (8080)
        environment.put 'ALFRESCO_TCP_8080', '8080'

        isRequiredBy(project.tasks.integrationTest)

        dev {
            useComposeFiles = [
                    '../src/test/resources/compose/docker-compose.yml',
                    '../src/test/resources/compose/docker-compose-development.yml'
            ]
        }

        graphite {
            useComposeFiles = [
                    '../src/test/resources/compose/docker-compose.yml',
                    '../src/test/resources/compose/docker-compose-graphite.yml',
                    '../src/test/resources/compose/docker-compose-grafana.yml',
            ]
        }

        prometheus {
            useComposeFiles = [
                    '../src/test/resources/compose/docker-compose.yml',
                    '../src/test/resources/compose/docker-compose-prometheus.yml',
                    '../src/test/resources/compose/docker-compose-grafana.yml'
            ]
        }

        sharding {
            useComposeFiles = [
                    '../src/test/resources/compose/docker-compose.yml',
                    '../src/test/resources/compose/docker-compose-sharding.yml'
            ]
        }

        solr {
            useComposeFiles = [
                    '../src/test/resources/compose/docker-compose.yml',
                    '../src/test/resources/compose/docker-compose-prometheus.yml',
                    '../src/test/resources/compose/docker-compose-grafana.yml',
                    '../src/test/resources/compose/docker-compose-solr.yml'
            ]
        }

        dockerCompose.solr.fromBuildImage("SOLR_DOCKER_IMAGE", solrImage.tasks.named("buildDockerImage"))
    }
}
