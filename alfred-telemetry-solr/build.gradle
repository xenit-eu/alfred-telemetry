plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
    id 'eu.xenit.alfresco' version '1.1.0' apply false
    id 'base'
    id 'idea'
}

subprojects {
    // Do not configure solr-common here
    if (project.name == "alfred-telemetry-solr-common") {
        return;
    }

    apply from: "${project.projectDir}/overload.gradle"

    description = "Alfred Telemetry Solr extension for ${solrFlavor} which enables exposure of Metrics using Micrometer"

    plugins.withId('java') {
        configurations {
            implementationSources {
                canBeResolved = true
                canBeConsumed = false
                visible = false
                extendsFrom(implementation)
                attributes {
                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
                    attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, DocsType.SOURCES))
                }
            }
        }
        dependencies {
            implementation project(':alfred-telemetry-solr:alfred-telemetry-solr-common')
        }
        java {
            withJavadocJar()
            withSourcesJar()
        }

        javadoc {
            dependsOn(configurations.implementationSources)
            source += configurations.implementationSources.collect {
                zipTree(it).matching {
                    include('**/*.java')
                }
            }
            classpath += configurations.runtimeClasspath
        }

        sourcesJar {
            dependsOn(configurations.implementationSources)
            from(configurations.implementationSources.collect { zipTree(it) })
        }
    }

    plugins.withId('eu.xenit.docker') {
        dockerFile {
            dockerFile = createDockerFile.getDestFile()
            dockerBuild {
                repository = "hub.xenit.eu/alfred-telemetry/solr-alfred-telemetry-${solrFlavor}"
                automaticTags = false
                tags = ["${version}"]
            }

        }
    }

    plugins.withId('com.github.johnrengelman.shadow') {
        jar {
            archiveClassifier = 'internal-jar'
        }
        shadowJar {
            archiveClassifier = ''
            dependencies {
                exclude(dependency('org.slf4j:slf4j-api'))
            }
            ext.relocatePackage = { pkg -> relocate(pkg, "eu.xenit.alfred.telemetry.solr.internal.shadow.${pkg}") }
            relocatePackage('com.codahale')
            relocatePackage('com.rabbitmq')
            relocatePackage('io.github.mweirauch')
            relocatePackage('io.micrometer')
            relocatePackage('io.prometheus')
            relocatePackage('org.HdrHistogram')
            relocatePackage('org.LatencyUtils')
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    project.shadow.component(it)
                    artifact sourcesJar
                    artifact javadocJar
                }
            }
        }
    }
}
